'use strict';

const path = require('path');
const util = require('util');
const write = require('write');
const catharsis = require('catharsis');
const doctrine = require('doctrine');
const parseType = require('../lib/parse/type');

const fixtures = [
  "('public'|'protected'|'private')",
  "{'ok':String}",
  '{0X2:String, 0:Number, 100e200, 10e-20:Number}',
  '!Object',
  '!string',
  '"Hello, World"',
  '$',
  '()',
  '(Array|String)',
  '(boolean)',
  '(boolean|"string")',
  '(boolean|"string"|array)',
  '(boolean|string)',
  '(boolean|string|array)',
  '(number|boolean)',
  '(number|string)',
  '(string|number)',
  '(Window)',
  '*',
  '-142.42',
  '...(Array|String)',
  '...number',
  '32',
  '?',
  '?number',
  '?string',
  '[*]',
  '[?]',
  '[?string,...string?]',
  '[?string,...string]',
  '[string,   ...string]',
  '[string,  ...string]',
  '[string, ...string]',
  '[string,...string?]',
  '[string,...string]',
  '[string,]',
  '[string]',
  '_',
  'a.b.c',
  'all',
  'any',
  'Array.<String, Number>',
  'Array.<string=>',
  'Array.<String>',
  'Array<?>',
  'Array<Array<string>>',
  'Array<Function>',
  'Array<String>',
  'Array|String',
  'boolean',
  'boolean|string',
  'Cocoa.Cappuccino',
  'constructor',
  'false',
  'foo.bar',
  'Function',
  'function()',
  // 'function(): ?|number',
  'function(): number',
  'function(...a)',
  'function(...a:!b)',
  'function(...a:?b)',
  'function(...a:b)',
  'function(...a:b=)',
  'function(...a=)',
  'function(?, number)',
  'function(?string=, number=)',
  'function(a)',
  'function(a:b)',
  'function(a:b=)',
  'function(a=)',
  'function(new:goog.ui.Menu, string)',
  'function(number, ?)',
  'function(number, number): number',
  'function(string)',
  'function(string, ...[number]): number',
  'function(string, boolean)',
  'function(this:goog.ui.Menu, string)',
  'function(this:T,?,number)',
  'function(this:T,?,number):?',
  'goog.ui.Component?',
  'goog.ui.Menu',
  'interface',
  'number',
  'number|boolean',
  'Object!',
  'Object.<string, number>',
  'Object<string, number>',
  'Object|undefined',
  'Object|null',
  'Object|void',
  'WeakMap|WeakSet',
  'record',
  'string!',
  'string?',
  'String[]',
  'true',
  'undefined',
  'null',
  'unknown',
  'Window',
  '{ok: true, data: string}',
  '{ok: false, error: Error}',
  '({ok: true, data: string} | {ok: false, error: Error})',
  '{"\\r\\n\\t\\u2028\\x20\\u20\\b\\f\\v\\\r\n\\\n\\0\\07\\012\\o":String}',
  '{,}',
  '{.2:String, 30:Number, 0x20:String}',
  '{0X2:String, 0:Number, 100e200:String, 10e-20:Number}',
  '{20:String}',
  '{myNum: number, myObject}',
  '{}',
  '!', // throws error in doctrine
  '(function(...a): ?)|number',
  '...number',
  '=string',
  'Array.<(string|number), // ?Object=>|string|undefined',
  'Array.<string|number, // ?Object=>|string|undefined',
  'function(...a): (?|number)',
  'function(...a): ?|number',
  'number=',
  'string=',
  'string|array|number',
  'string|number',
  'string|number|Test',
  '(\'public\'|\'protected\'|\'private\')',
  '(-42|1.5|0)',
  '(true|false)',
  '{ok: true, data: string}',
  'Array<string, object>',
  'Array<string>',
  'ClassName',
  'Error',
  'function',
  'number',
  'Object',
  'object',
  '{ok: false, error: Error}',
  'string|array|function',
  'String',
  'string',
  'thingName.name',
  'thing',
  '{ok:String'
];

let output = [];
output.push('# Comparison');
output.push('');
output.push('Comparison of the _type parsing_ results from [catharsis][], [doctrine][], and [parse-comments][].');
output.push('');
output.push('_(This document is generated by running `$ node docs/comparisons` on the [docs/comparisons.js][docs] file. Please update that file if you wish to add fixtures or another library to the comparisons.)_');
output.push('');

let opts = { ignoreSyntaxErrors: true };
let NA = '// N/A (throws parse error)';
let inspect = (...args) => {
  if (args[0] === void 0) return NA;
  return util.inspect(...args, { depth: null, maxArrayLength: null });
};

fixtures.forEach(fixture => {
  output.push('**Fixture**');
  output.push('');
  output.push('```');
  output.push(fixture.split(/\n/).join('\\n').split(/\r/).join('\\r'));
  output.push('```');
  output.push('');
  output.push('**Result**');
  output.push('');
  output.push('```js');
  output.push('// parse-comments');
  try {
    output.push(inspect(parseType(fixture, null, opts).value));
  } catch (err) {
    output.push(NA);
  }
  output.push('');
  output.push('// doctrine');
  try {
    output.push(inspect(doctrine.parseType(fixture)));
  } catch (err) {
    output.push(NA);
  }
  output.push('');
  output.push('// catharsis');
  try {
    output.push(inspect(catharsis.parse(fixture)));
  } catch (err) {
    output.push(NA);
  }

  output.push('```');
  output.push('');
});

output.push('[docs]: https://github.com/jonschlinkert/parse-comments/blob/master/docs/comparisons.js');

let dest = path.join(__dirname, 'content/comparison.md');
write.sync(dest, output.join('\n').trim() + '\n');
console.log('created:', path.relative(__dirname, dest));
